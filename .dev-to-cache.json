[
  {
    "type_of": "article",
    "id": 912922,
    "title": "10 Powerful Array Methods",
    "description": "Array is commonly use in programming. I can look at an array as a storage of data or a collection of...",
    "published": true,
    "published_at": "2021-12-02T12:16:50.638Z",
    "slug": "10-powerful-array-methods-4hop",
    "path": "/tomyotwongjai/10-powerful-array-methods-4hop",
    "url": "https://dev.to/tomyotwongjai/10-powerful-array-methods-4hop",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 30,
    "published_timestamp": "2021-12-02T12:16:50Z",
    "body_markdown": "Array is commonly use in programming. I can look at an array as a storage of data or a collection of variables. This article will cover 10 must know array methods.\n\n#1: forEach()\nRather than using for loop to loop through arrays, this higher order function array methods let programmer write much nicer code when looping through data.\n\nI have an array with some cardio workout for each day.\n##Example:\n```javascript\nconst cardio = [\n  { Day: 'Monday', workout: 'bike', start: '9:00am', end: '9:30am' },\n  { Day: 'Tuesday', workout: 'Running', start: '9:00am', end: '10:30am' },\n  { Day: 'Wednesday', workout: 'Boxing', start: '9:00am', end: '10:00am' },\n  { Day: 'Thursday', workout: 'Swimming', start: '9:00am', end: '9:30am' },\n  { Day: 'Friday', workout: 'Soccer', start: '10:00am', end: '12:30am' },\n];\n```\nLooping through cardio with for loop:\n```javascript\nfor (let i = 0; i \u003c cardio.length; i++) {\n  console.log(cardio[i]);\n}\n//Output:\n{Day: 'Monday', workout: 'bike', start: '9:00am', end: '9:30am'}\n{Day: 'Tuesday', workout: 'Running', start: '9:00am', end: '10:30am'}\n{Day: 'Wednesday', workout: 'Boxing', start: '9:00am', end: '10:00am'}\n{Day: 'Thursday', workout: 'Swimming', start: '9:00am', end: '9:30am'}\n{Day: 'Friday', workout: 'Soccer', start: '10:00am', end: '12:30am'}\n```\nlooping in forEach is quite elegant, I pass in a callback function I called it workout:\n\n```javascript\ncardio.forEach(function (workout) {\n  console.log(workout);\n});\n\n//Similar output with cleaner code\n```\n#2: filter()\nLike the name, filter use to filtering out something in the array.\n\nIf I wanted to get an even number inside an array.\n##Example:\n```javascript\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15];\n```\nIn for loop I would construct it like this:\n```javascript\n// set evenNum to an empty array\nlet evenNum = [];\nfor (let i = 0; i \u003c nums.length; i++) {\n//if current iteration is even\n  if (nums[i] % 2 === 0) {\n//using push methods to push nums to evenNum array and pass in current iteration.\n    evenNum.push(nums[i]);\n  }\n}\n//outputs: \n[2, 4, 6, 8, 10, 12, 14]\n```\nUsing filter methods:\n```javascript\nconst evenNum = nums.filter(function (even) {\n  if (even % 2 === 0) {\n    return true;\n  }\n});\nconsole.log(evenNum);\n//output: \n[2, 4, 6, 8, 10, 12, 14]\n```\nI can simplify it even more with ES6 arrow function:\n```javascript\nconst evenNum = nums.filter((even) =\u003e even % 2 === 0);\nconsole.log(evenNum);\n```\n#3: map()\nThis methods is very useful for when you want to get specific element inside an array or create an array within array.\n\nIn my cardio array, I want to log workout name.\n\n##Example:\n```javascript\nconst cardio = [\n  { Day: 'Monday', workout: 'Bike', start: '9:00am', end: '9:30am' },\n  { Day: 'Tuesday', workout: 'Running', start: '9:00am', end: '10:30am' },\n  { Day: 'Wednesday', workout: 'Boxing', start: '9:00am', end: '10:00am' },\n  { Day: 'Thursday', workout: 'Swimming', start: '9:00am', end: '9:30am' },\n  { Day: 'Friday', workout: 'Soccer', start: '10:00am', end: '12:30am' },\n];\n\n const workoutLog = cardio.map((item) =\u003e {\n   return item.workout;\n });\nconsole.log(workoutName);\n//output: ['Bike', 'Running', 'Boxing', 'Swimming', 'Soccer']\n```\nwhat if I want the summary of my workout log? I can use ES6 template string `` `${}` `` to access that data like this:\n```javascript\nconst workoutLog = cardio.map((item) =\u003e `${item.Day}: ${item.workout} \n= \n[${item.start} - ${item.end}]`\n);\nconsole.log(workoutLog);\n\n\n//output:\n0: \"[Monday: bike] [9:00am - 9:30am]\"\n1: \"[Tuesday: Running] [9:00am - 10:30am]\"\n2: \"[Wednesday: Boxing] [9:00am - 10:00am]\"\n3: \"[Thursday: Swimming] [9:00am - 9:30am]\"\n4: \"[Friday: Soccer] [10:00am - 12:30am]\"\n```\nThis method is very powerful and this method is use a lot in programming.\n\n#4: sort()\nSort method would sort compare two value and sorted the value according to the return.\n\nIn this example I want to sort my team from youngest to oldest.\n\n##Example:\n```javascript\nconst team = [\n  { name: 'Tom', age: 33 },\n  { name: 'Ann', age: 23 },\n  { name: 'Tina', age: 35 },\n  { name: 'Michael', age: 21 },\n  { name: 'Aga', age: 27 },\n  { name: 'John', age: 29 },\n  { name: 'Landon', age: 30 },\n];\n\n team.sort(function (a, b) {\n   return a.age - b.age;\n });\n\n//arrow function\nteam.sort((a, b) =\u003e a.age - b.age);\nconsole.log(personList);\n\n//output:\n0: {name: 'Michael', age: 21}\n1: {name: 'Ann', age: 23}\n2: {name: 'Aga', age: 27}\n3: {name: 'John', age: 29}\n4: {name: 'Landon', age: 30}\n5: {name: 'Tom', age: 33}\n6: {name: 'Tina', age: 35}\n```\n#5: reduce()\nReduce data in the array and return single value.\n\n##Example: \n\n```javascript\n//Getting total price for all items\n\nconst items = [\n  { name: 'item1', price: 100 },\n  { name: 'item2', price: 25 },\n  { name: 'item3', price: 50 },\n  { name: 'item4', price: 89 },\n  { name: 'item5', price: 5 },\n];\n\nconst total = items.reduce((item) =\u003e {\n \n});\n```\nReduce take in an item + another property of what I want to reduce everything into, in this case- total price:\n```javascript\nconst total = items.reduce((totalPrice, item) =\u003e {\n return totalPrice + item.price;\n//take in second param as a starting point\n}, 0);\n\nconsole.log('total:' + total)\n\n//output:\ntotal:269\n```\n#6: find()\nFinding single object in an array.\n\n##Example:\n```javascript\nconst items = [\n  { name: 'item1', price: 100 },\n  { name: 'item2', price: 25 },\n  { name: 'item3', price: 50 },\n  { name: 'item4', price: 89 },\n  { name: 'item5', price: 5 },\n];\n\nconst itemName = items.find((item) =\u003e {\nreturn item.name === 'item3'\n})\n\n//output:\n{name: 'item3', price: 50}\n```\n#7: some()\nReturn true or false if element presented in an array.\n\n##Example:\n```javascript\n//Check to see if any items is over $100\nconst items = [\n  { name: 'item1', price: 100 },\n  { name: 'item2', price: 25 },\n  { name: 'item3', price: 50 },\n  { name: 'item4', price: 89 },\n  { name: 'item5', price: 5 },\n];\n\nconst itemIsExpensive = items.some((item) =\u003e {\n  return item.price \u003e 101;\n});\n\nconsole.log(itemIsExpensive);\n\n//output: \nfalse\n//since no items is over $100\n```\n#8: every()\nLike some(), every() return true or false but instead of check for a single item, it check if every items is or isn't presented in an array.\n\n##Example:\n```javascript\n//check if every items is lessthan or equal $100\nconst items = [\n  { name: 'item1', price: 100 },\n  { name: 'item2', price: 25 },\n  { name: 'item3', price: 50 },\n  { name: 'item4', price: 89 },\n  { name: 'item5', price: 5 },\n];\n\nconst itemIsExpensive = items.every((item) =\u003e {\n  return item.price \u003c= 100;\n});\n\nconsole.log(itemIsExpensive)\n\n//output: \ntrue\n//since every items in an array is $100 dollar or less\n```\n#9: includes()\nChecking if something is include inside an array.\n\n##Example:\n```javascript\nconst number = [1, 3, 5, 6, 4]\nconst include = number.includes(6);\nconsole.log(include);\n\n//output:\ntrue\n```\n#10: concat()\nJoin two or more array into one.\n\n##Example:\n```javascript\nconst a = [1, 2, 3];\nconst b = [true, false];\n\nconst c = a.concat(b);\n\n//output:\n[1, 2, 3, true, false]\n\n//add new array and pass it in as a parameter\nconst a = [1, 2, 3];\nconst b = [true, false];\nconst d = ['tom', 'mikolaj', 'aga'];\n\nconst c = a.concat(b, d);\nconsole.log(c);\n\n//output:\n[1, 2, 3, true, false, 'tom', 'mikolaj', 'aga']\n```\nAnd That is my top 10 array methods, comment below if there's other array methods I should include in my programming arsenal.\n\n###Thanks for reading :) !!!!",
    "positive_reactions_count": 3,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--kK08f1Sb--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eudn2b1wct7hvpmfzu7o.jpg",
    "tag_list": ["javascript", "productivity", "beginners", "programming"],
    "canonical_url": "https://dev.to/tomyotwongjai/10-powerful-array-methods-4hop",
    "reading_time_minutes": 5,
    "user": {
      "name": "Tom Yotwongjai",
      "username": "tomyotwongjai",
      "twitter_username": null,
      "github_username": "tomyotwongjai",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gAiaNRhl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVbW_cYl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 909765,
    "title": "Equality Operators",
    "description": "What is equality operators?   Equality operators comparing two values which will either...",
    "published": true,
    "published_at": "2021-11-28T12:41:26.457Z",
    "slug": "equality-operators-33io",
    "path": "/tomyotwongjai/equality-operators-33io",
    "url": "https://dev.to/tomyotwongjai/equality-operators-33io",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 95,
    "published_timestamp": "2021-11-28T12:41:26Z",
    "body_markdown": "## What is equality operators?\nEquality operators comparing two values which will either return a Boolean value \"true\" or \"false\".\n\nEquality is use in decision making scenario. There's two type of equality ``==`` \"loose equality\" \u0026 ``===`` \"strict equality\". Why is this important? Because in a situation when I want to compare an object and primitive data, these two does the same thing, but the result are different.\n\nLoose equality will try convert value to match each other data type before compare the value.\n```\nconsole.log(1 == \"1\");\nconsole.log('hello' == 'hello');\n\n// output: \ntrue \ntrue \n```\nStrict equality does not do that, all it does is compare and considers operands of different type to be different, it's also faster since it skip one step.\n\n```\nconsole.log(1 === \"1\");\nconsole.log('hello' === 'hello');\n\n//output: \nfalse \ntrue\n```\n\nSo Which to use? Unless there is a good reason to use ``==`` It is widely consider best practice to use ``===``. So now I know what to use, I will stick to strict equality. Let see how strict equality compare primitive and object.\n\nWhen comparing object and primitive, in primitive- strict equality just comparing the actual value, whether it's a string, number, or Boolean.\n```\n//primitive\n\nvar obj1 = 1\nvar obj2 = 1\nconsole.log(obj1 === obj2);\n\n//output: true\n```\nWhile an object, it doesn't just look at the value in object but also in memory.\n\n```\n//object comparison\n\nobj1 = {number: 1}\nobj2 = {number: 1}\nconsole.log(obj1 === obj2);\n\n//output: false\n```\n\n The only time an object is equal to another object is when they are both the same.\n\n```\nlet a = {number: 1};\nlet b = a;\n\nconsole.log( a === b);\n\n//output: true\n```\n## Inequality\n\nOpposite of equality operators is Inequality operator ``!==``. Strict inequality operator check if two operands are not equal and return Boolean. Similar to strict equality strict inequality also consider operands of different type to be different. To not confuse myself since it is best practice to use strict equality, I will only use strict inequality when comparing if two operands are different.\n\n```\nconsole.log(1 !== \"1\");\nconsole.log('hello' !== 'hello');\nconsole.log(true !== 1);\n\n//output: \ntrue\nfalse\ntrue\n```\n\nAnd that is my understanding on equality. \n###Array Methods Next!\n\nMy other post:\n\u003ca href=\"https://dev.to/tomyotwongjai/control-flow-in-js-1ob6\"\u003eControl Flow\u003c/a\u003e\n\u003ca href=\"https://dev.to/tomyotwongjai/logical-operators-2ei2\"\u003eLogical Operators\u003c/a\u003e\n\n###Thanks for reading! :)\n\n\n\n\n",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--rKgP4CV7--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siqgx9n5k1a6mwebq9zp.jpg",
    "tag_list": ["javascript", "webdev", "programming", "beginners"],
    "canonical_url": "https://dev.to/tomyotwongjai/equality-operators-33io",
    "reading_time_minutes": 2,
    "user": {
      "name": "Tom Yotwongjai",
      "username": "tomyotwongjai",
      "twitter_username": null,
      "github_username": "tomyotwongjai",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gAiaNRhl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVbW_cYl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 909818,
    "title": "Logical Operators",
    "description": "Note:   This is part of control flow which I forgot to mention and would like to add on to...",
    "published": true,
    "published_at": "2021-11-26T15:56:37.859Z",
    "slug": "logical-operators-2ei2",
    "path": "/tomyotwongjai/logical-operators-2ei2",
    "url": "https://dev.to/tomyotwongjai/logical-operators-2ei2",
    "comments_count": 0,
    "public_reactions_count": 2,
    "page_views_count": 26,
    "published_timestamp": "2021-11-26T15:56:37Z",
    "body_markdown": "## Note: \nThis is part of control flow which I forgot to mention and would like to add on to that with it's own explaination. Check out the control flow blog \u003ca href=\"https://dev.to/tomyotwongjai/control-flow-in-js-1ob6\"\u003eHERE\u003c/a\u003e\n\n\n##What is Logical Operators?\n\nA logical operators job is simply connect two or more programming statements to return ``true`` or ``false``.\n\nThree logical operators are: \n```\nAND \u0026\u0026 | Return true if both operands are true.\nOR  || | Return true if either operand is true.\nNOT !  | Return true if operand is false.\n```\nLet say I want to evaluate if user password is long enough and have special character ``#``, I can use ``\u0026\u0026`` to evaluate like this:\n\n```javascript\nconst password = \"#passwordislong\";\n\nif (password.length \u003e= 10 \u0026\u0026 password.includes('#')) {\n  console.log('very strong');\n} else if (password.length \u003e= 8) {\n  console.log('strong');\n} else {\n  console.log('weak');\n}\n```\nAbove, the password is more than 10 character long and has a special character # so it safe to say the password is 'very strong'.\n\nNow, what if I want to include ``||`` to else if statement so if the password length is 8 character or more or password length is greater or equal to 5 with special character ``#``  for example.\n```javascript\nif (password.length \u003e= 10 \u0026\u0026 password.includes('#')) {\n  console.log('Very strong');\n} else if (\n  password.length \u003e= 8 ||\n  (password.length \u003e= 5 \u0026\u0026 password.includes('#'))\n) {\n  console.log('strong');\n} else {\n  console.log('weak');\n}\n```\nThe else if take in two condition. If the password length is greater or equal to 8 or password length is greater or equal to 5 and it include '@', then the statement is true and the password is 'strong'\n\n### Last operator I will analyze is ``!`` or \"Logical Not\".\nLogical not operator return something true to false and vice versa .\n\n### Example:\n\n In normal behavior, the if statement only run the code block only if what it's evaluated inside is true.\n\n```javascript\n//Let's evaluate if there's an item\n\nlet item = false;\n\nif (item) {\n  console.log('run something');\n}\n//output: Nothing since item is false, the code block will not run\n```\nBut if I add the logical not ``!`` in front of the item, it switch it to true and the code now run without changing the value item which will always be false.\n\n```javascript\n//If we add ! to item\n\nlet item = false\n\nconst item = false;\n\nif (!item) {\n  console.log('run something');\n}\n\n//output: 'run something'\n```\n\nThere we go! It is important for me to understand logical operators since it is the building block of control flow. Using this will help me develop and evaluate statements effectively.\n\n##Thanks for reading !! :)\n###Feel free to leave any comment or feedback!\n\n\n\n",
    "positive_reactions_count": 2,
    "cover_image": null,
    "tag_list": ["javascript", "webdev", "beginners", "programming"],
    "canonical_url": "https://dev.to/tomyotwongjai/logical-operators-2ei2",
    "reading_time_minutes": 2,
    "user": {
      "name": "Tom Yotwongjai",
      "username": "tomyotwongjai",
      "twitter_username": null,
      "github_username": "tomyotwongjai",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gAiaNRhl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVbW_cYl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 905619,
    "title": "Control Flow in JS",
    "description": "I've been researching and trying to teach myself JavaScript and through my countless of hours looking...",
    "published": true,
    "published_at": "2021-11-23T14:44:14.006Z",
    "slug": "control-flow-in-js-1ob6",
    "path": "/tomyotwongjai/control-flow-in-js-1ob6",
    "url": "https://dev.to/tomyotwongjai/control-flow-in-js-1ob6",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 58,
    "published_timestamp": "2021-11-23T14:44:14Z",
    "body_markdown": "  \nI've been researching and trying to teach myself JavaScript and through my countless of hours looking for how to master this amazing language, I've made a list of topics that I think is important for me to tap in to the power of this library and better myself to write code that not only I can understand, but my future peers as well. This will be a series which entails 14 subjects beginner should focus on. \n## (This is from my experience and I'm not saying if you learn this, you will become a master in JavaScript)\nToday, we start with:\n## Control Flow\n Why is it important? Well, control flow let me dictate how the code should run when certain condition is met. \n\u003cpre\u003e\nif(I'm stuck === true){\n  take a break;\n}else{\n keep going;\n}\n\u003c/pre\u003e\n\nAmong many different methods, I found that these three are most commonly use and beginner friendly\n for loops, while loops(do while loop), if/else statements.\n\n## \"The main job of a loop is to loop through portion of codes in set number of times.\"\n\nLet's take a look and some example and different ways of writing each methods:\nLet say I want to loop though an array and access data in that array. How would I go about it?\n## for loops:\nIn most cases, I would retrieve data from some data base but I will not do that here. So I will create my own data called tasks.\n```javascript\n//first let setup constant(we will create some tasks data in this array)\nconst tasks = ['Walk Dog', 'Wash dishes', 'Take out trash', 'Wash cloths']\n\nfor(let i = 0; i \u003c tasks.length; i++){\nconsole.log('Loop through tasks:', tasks[i]\n}\nconsole.log('Loop finish')\n```\n###The code above is doing four things:\n1) I write my counter ``let i = 0; ``\n2) for i is less than tasks.length, so as long as i is less than the length of tasks value in tasks array (which is four), then it will cycle through each tasks.\n3)Finally I add increment ``i++`` which add 1 to every loop(make sure to do this or else your code will be infinite loop).\n4) for each cycle I want the name to logout so we console.log()\n``` \n//if I only console.log(i) I will get:\n0\n1\n2\n//Why zero and not 1? Because programming are zero index, most programming language the first element is always 0\n```\n``` \n//to get my tasks data I use square bracket notation[] I link the tasks to the code and inside I add i like this:\nconsole.log(tasks[i])\n\n//this will print out each tasks in our array\nLoop through tasks: Walk Dog\nLoop through tasks: Wash dishes\nLoop through tasks: Take out trash\nLoop through tasks: Wash cloths\nLoop finish\n```\n## while loops \u0026 do while loops\nAlternative to for loop but slightly different writing\n\n```javascript\nlet i = 0;\nwhile(i \u003c tasks.length){\nconsole.log(tasks[i]);\ni++;\n}\nconsole.log('Loop finish')\n\nlet i = 0;\ndo{\nconsole.log(tasks[i]);\ni++;\n}while(i \u003c tasks.length);\nconsole.log('Loop finish')\n\n//do while loops let the code block be executed at least once even if the condition is true or false.\n```\n## If/Else statement (Decision making)\nLet you check if the condition is true or false.\n\nLet say if I want to check the password strength of user input and response according to the condition.\n\nExample:\n```javascript\nconst password = 'Iampassword'\n\nif(password.length \u003e= 10){\nconsole.log('Very strong')\n}else if(password.length \u003e= 7){\nconsole.log('strong')\n}else{\nconsole.log('weak')\n}\n```\nClearly I know what will be the outcome of this code. console will log the password as 'very strong'.\n\nAs I can see, these are just three control flow example that I'm using, yes, there's switch statement, function, etc.. but I think as a beginner, if I understand how these three work, I will likely be able to quickly learn and understand other control flow methods and easily implemented into your code.\n\n###Feel free to leave any question or feedback.\n#Thanks for reading!!!\n\n\n\n\n\n\n\n\n\n\n\n",
    "positive_reactions_count": 3,
    "cover_image": null,
    "tag_list": ["javascript", "webdev", "beginners", "programming"],
    "canonical_url": "https://dev.to/tomyotwongjai/control-flow-in-js-1ob6",
    "reading_time_minutes": 3,
    "user": {
      "name": "Tom Yotwongjai",
      "username": "tomyotwongjai",
      "twitter_username": null,
      "github_username": "tomyotwongjai",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gAiaNRhl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVbW_cYl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 903077,
    "title": "Fetching weather API Using async/await \u0026 axios in react.",
    "description": "I learn an easy way to retrieve weather data from weathermap.org without too may lines of...",
    "published": true,
    "published_at": "2021-11-19T14:38:59.825Z",
    "slug": "fetching-weather-api-using-asyncawait-axios-in-react-1hd2",
    "path": "/tomyotwongjai/fetching-weather-api-using-asyncawait-axios-in-react-1hd2",
    "url": "https://dev.to/tomyotwongjai/fetching-weather-api-using-asyncawait-axios-in-react-1hd2",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 133,
    "published_timestamp": "2021-11-19T14:38:59Z",
    "body_markdown": "##I learn an easy way to retrieve weather data from weathermap.org without too may lines of codes and I want to share with you. Let me know if there's a better way to do so. \n1. I install axios into my react weather application:\n\u003cpre\u003e\n//Axios is use to get HTTP request data from external sources like weather api.\n\nnpm install axios\n\u003c/pre\u003e\n \n\n2. I Go to openweathermap.org and create an account to get url and custom generated api key. Once account is created, click API Keys to create your api key.\nYou will need the base URL \u0026 your custom key as shown below:\n\n\u003cpre\u003e\nhttps://api.openweathermap.org/data/2.5/\n[custom api key]\n\u003c/pre\u003e\n\nDefine my api key in my react file. I have in my app.js file:\n```javascript\nconst apiKeys = {\n  key: 'e902985907738b357b6a7c7a2651a108',\n  base: 'https://api.openweathermap.org/data/2.5/',\n};\n```\nimport axios to my app.js file:\n```javascript\nimport axios from 'axios';\n```\nIn my function called App I create async function:\n\n```javascript\nasync function fetchWeather(e) {\n    e.preventDefault();\n    try {\n      const response = await axios(\n//The base URL \u0026 api key\n        `${apiKeys.base}weather?q=${city}\u0026units=metric\u0026APPID=${apiKeys.key}`\n      );\n      updateWeather(response.data);\n//console.log to see if there's data\nconsole.log(response);\n    } catch (error) {\n      setError({ message: 'Not Found' });\nconsole.log(error);\n    }\n  }\n```\nThe code above work like this: Async tell react that the function fetchWeather is asynchronous and await for axios to retrieve the data once it finish, return the result to response variable. Putting the code into try/catch block will catch an error of the code that could potentially fail. In this case if \nthere's no location found, the error message will be shown.\n\n####There you go! I hope this is helful. Leave any comment and constructive criticism. :)\n##See you next time!\n\nSource code: https://github.com/tomyotwongjai/react-weather-app\n",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": ["javascript", "react", "beginners", "webdev"],
    "canonical_url": "https://dev.to/tomyotwongjai/fetching-weather-api-using-asyncawait-axios-in-react-1hd2",
    "reading_time_minutes": 2,
    "user": {
      "name": "Tom Yotwongjai",
      "username": "tomyotwongjai",
      "twitter_username": null,
      "github_username": "tomyotwongjai",
      "website_url": null,
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--gAiaNRhl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--EVbW_cYl--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/757322/df1c0841-b256-4d73-8a1d-2dca62a63b83.jpeg"
    }
  }
]
